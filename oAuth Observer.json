{
  "description": "Catch oAuth requests",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 4
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 3
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end",
        "definition_id": "caido/passive-end",
        "display": {
          "x": 0,
          "y": 330
        },
        "id": 1,
        "inputs": [],
        "name": "Passive End",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": 0,
          "y": 220
        },
        "id": 3,
        "inputs": [
          {
            "alias": "response",
            "value": {
              "data": "$on_intercept_response.response",
              "kind": "ref"
            }
          },
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "export async function run({ request, response }, sdk) {\n    let queryString = request.getQuery()\n    let queryParams = new URLSearchParams(queryString)\n    \n    // Check for required OAuth parameters\n    if (queryParams.has('client_id') && queryParams.has('response_type')) {\n      let clientId = queryParams.get('client_id')\n      let responseType = queryParams.get('response_type')\n      \n      // Gather additional parameters and decode redirect_uri\n      let scope = queryParams.get('scope') || 'not specified'\n      let redirectUri = queryParams.get('redirect_uri') \n        ? decodeURIComponent(queryParams.get('redirect_uri'))\n        : 'not specified'\n      let state = queryParams.get('state') || 'not specified'\n      \n      await sdk.findings.create({\n        title: \"OAuth Authorization Request Detected\",\n        description: `OAuth authorization request detected with parameters:\\n\\n` +\n                    `Client ID: ${clientId}\\n` +\n                    `Response Type: ${responseType}\\n` +\n                    `Scope: ${scope}\\n` +\n                    `Redirect URI (decoded): ${redirectUri}\\n` +\n                    `State: ${state}\\n\\n` +\n                    `Full Query String: ${queryString}`,\n        request: request,\n        reporter: \"OAuth Request Finder\",\n        dedupeKey: `oauth-request-${clientId}-${responseType}-${state}`\n      });\n    }\n  }",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      },
      {
        "alias": "on_intercept_response",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": 0,
          "y": 100
        },
        "id": 4,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      }
    ]
  },
  "id": "548000fb-8a80-4343-af96-b9eae73f7fef",
  "kind": "passive",
  "name": "oAuth Observer"
}